// generated by gocc; DO NOT EDIT.

package lexer

/*
Let s be the current state
Let r be the current input rune
transitionTable[s](r) returns the next state.
*/
type TransitionTable [NumStates]func(rune) int

var TransTab = TransitionTable{

	// S0
	func(r rune) int {
		switch {
		case r == 98: // ['b','b']
			return 1
		case r == 102: // ['f','f']
			return 2

		}
		return NoState

	},

	// S1
	func(r rune) int {
		switch {
		case r == 97: // ['a','a']
			return 3

		}
		return NoState

	},

	// S2
	func(r rune) int {
		switch {
		case r == 111: // ['o','o']
			return 4

		}
		return NoState

	},

	// S3
	func(r rune) int {
		switch {
		case r == 114: // ['r','r']
			return 5

		}
		return NoState

	},

	// S4
	func(r rune) int {
		switch {
		case r == 111: // ['o','o']
			return 6

		}
		return NoState

	},

	// S5
	func(r rune) int {
		switch {

		}
		return NoState

	},

	// S6
	func(r rune) int {
		switch {

		}
		return NoState

	},
}
